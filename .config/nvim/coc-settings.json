{
	"suggest.virtualText": true,
	"suggest.fixInsertedWord": false,
	"suggest.removeDuplicateItems": true,
	"suggest.completionItemKindLabels": {
		"keyword": "key",
		"variable": "var",
		"value": "val",
		"operator": "op",
		"constructor": "new",
		"function": "fn",
		"reference": "ref",
		"constant": "const",
		"method": "method",
		"struct": "struct",
		"class": "class",
		"interface": "trait",
		"text": "txt",
		"enum": "enm",
		"enumMember": "enmMem",
		"module": "mod",
		"color": "color",
		"property": "property",
		"field": "field",
		"unit": "unit",
		"event": "event",
		"file": "file",
		"folder": "folder",
		"snippet": "snip",
		"typeParameter": "type",
		"default": "dflt"
	},
	"links.tooltip": true,
	"diagnostic.errorSign": "\uf057",
	"diagnostic.infoSign": "\ufb4d",
	"diagnostic.hintSign": "\uf128",
	"diagnostic.refreshOnInsertMode": true,
	"diagnostic.virtualText": true,
	"diagnostic.virtualTextCurrentLineOnly": false,
	"diagnostic.virtualTextLineSeparator": " |",
	"codeLens.enable": true,
	"codeLens.position": "right_align",
	"codeLens.separator": "",
	"list.previewSplitRight": true,
	"coc.preferences.extensionUpdateCheck": "weekly",
	"coc.preferences.formatOnSaveFiletypes": [
		"*"
	],
	"semanticTokens.filetypes": [
		"*"
	],
	"explorer.quitOnOpen": true,
	"explorer.keyMappings.global": {
		"<c-h>": [
			"wait",
			"gotoParent"
		],
		"e": "open:vsplit"
	},
	"explorer.icon.enableNerdfont": true,
	"explorer.icon.source": "nvim-web-devicons",
	"explorer.buffer.showHiddenBuffers": true,
	"explorer.file.showHiddenFiles": true,
	"explorer.diagnostic.enableSubscriptNumber": true,
	"rust-analyzer.restartServerOnConfigChange": true,
	"rust-analyzer.updates.channel": "nightly",
	"rust-analyzer.inlayHints.bindingModeHints.enable": true,
	"rust-analyzer.inlayHints.closingBraceHints.minLines": 0,
	"rust-analyzer.inlayHints.closureReturnTypeHints.enable": "always",
	"rust-analyzer.inlayHints.lifetimeElisionHints.enable": "always",
	"rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames": true,
	"rust-analyzer.inlayHints.maxLength": 0,
	"rust-analyzer.inlayHints.typeHints.hideNamedConstructor": true,
	"rust-analyzer.lens.references.adt.enable": true,
	"rust-analyzer.lens.references.enumVariant.enable": true,
	"rust-analyzer.lens.references.method.enable": true,
	"rust-analyzer.lens.references.trait.enable": true,
	"rust-analyzer.rustfmt.rangeFormatting.enable": true,
	"rust-analyzer.completion.snippets.custom": {
		"Arc::new": {
			"postfix": "arc",
			"body": "Arc::new(${receiver})",
			"requires": "std::sync::Arc",
			"description": "Put the expression into an `Arc`",
			"scope": "expr"
		},
		"Rc::new": {
			"postfix": "rc",
			"body": "Rc::new(${receiver})",
			"requires": "std::rc::Rc",
			"description": "Put the expression into an `Rc`",
			"scope": "expr"
		},
		"Box::pin": {
			"postfix": "pinbox",
			"body": "Box::pin(${receiver})",
			"requires": "std::boxed::Box",
			"description": "Put the expression into a pinned `Box`",
			"scope": "expr"
		},
		"Ok": {
			"postfix": "ok",
			"body": "Ok(${receiver})",
			"description": "Wrap the expression in a `Result::Ok`",
			"scope": "expr"
		},
		"Err": {
			"postfix": "err",
			"body": "Err(${receiver})",
			"description": "Wrap the expression in a `Result::Err`",
			"scope": "expr"
		},
		"Some": {
			"postfix": "some",
			"body": "Some(${receiver})",
			"description": "Wrap the expression in an `Option::Some`",
			"scope": "expr"
		},
		"TodoMacro": {
			"postfix": [
				"td",
				"todo_macro"
			],
			"body": [
				"\ntodo!(\"==============================================================",
				"[${receiver}]\n",
				"\t${1:simple, concrete, logical}",
				"\t==============================================================\")\n"
			],
			"description": "custom todo! snippet",
			"scope": "expr"
		}
	},
	"Lua.telemetry.enable": true,
	"sumneko-lua.enableNvimLuaDev": true
}
